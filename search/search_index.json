{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Proyecto final Ecuacion de Calor en Dos Dimensiones Universidad de Costa Rica Nombre de los estudiantes: Alba Sofia Rojas Doza (C36873) Oscar Alvarez Poveda (C003949 Ricardo Jose Suarez Sancho (C17810) Karolay.. ** Julio 2025** Introduccion El presente proyecto, referente a la ecuacion de calor en dos dimensiones, tiene como fin resolver dicha ecuacion, la cual, es una ecuacion en derivadas parciales que modela la distribucion de la temperatura en una region del plano a lo largo del tiempo. La ecuacion de calor es indispensable en la fisica y la ingenieria, puesto que describe procesos de difusion termica en medios homogeneos bajo condiciones ideales. La ecuacion de movimiento esta dada por $$ \\frac{\\partial u}{\\partial t} = c^2 \\left( \\frac{\\partial^2 u}{\\partial x^2} + \\frac{\\partial^2 u}{\\partial y^2} \\right) $$ en donde u(x,y,t) representa la temperatura en la posicion (x,y) en el tiempo t y c es una constante que depende del material. En el desarrollo del proyecto, se resolvera dicha ecucion tanto en Python como en C++, aplicando asi practicas estudiadas en el curso, comi el uso apropiado de recursos de memoria, prinicipios de programacion orientada a objetos, paralelismo en memoria compartida y la documentacion y control de versiones con Git. Asimismo, debemos de experimentar con diferentes condiciones inciales y de frontera, y visualizar la evolucion temporal de la temperatura mediante mapas de colores. La resolucion de la ecuacion de calor en dos dimensiones, integra conocimientos teoricos y practicos en analisis numericos, programacion cientifica y visualizacion de datos, con el fin de construir una simulacion robusta y eficiente del comportamiento termico de un sistema bidimensional. Metodo de Crank- Nicolson Tras un largo analisis sobre los metodos posibles a utilizar para resolver la Ecuacion de calor en 2D, optamos por emplear el metodo de Crank-Nicolson. Puesto que este metodo posee varias ventajas, las cuales son: 1) Es estable incondicionalmente: al ser un metodo implicito, es estable para cualquier tamano de paso de tiempo; lo que lo hace ideal si queremos avanzar en el tiempo sin preocuparnos de que la simulacion explote numericamente. 2) Tiene segundo orden en tiempo y en espacio: esto proporciona menor error de truncamiento y resultados mas precisos con menos puntos. 3) Es eficiente en Python y en C++ con las herramientas adecuadas: a pesar de que en este metodo se debe de resolver un sistema linel en cada paso de tiempo, ese trabajo extra se compensa al usar deltas t mas grandes, se necesitan de menos pasos para llegar a una solucion con buena precision y se vuelve mas eficiente a largo plazo. 4) Tiene interpretacion fisica coherente: esto quiere decir que el calor se difunde gradualmente y no abrupdamente, como puede pasar en otros metodos. Codigo en C++ Poner el codigo aqui Codigo en Python [Haz clic aqui para abrir el notebook del codigo de Python] (https://github.com/Sofido23/ecuacion-de-calor/blob/main/docs/codigo.py.ipynb)","title":"Proyecto final"},{"location":"#proyecto-final","text":"","title":"Proyecto final"},{"location":"#ecuacion-de-calor-en-dos-dimensiones","text":"Universidad de Costa Rica Nombre de los estudiantes: Alba Sofia Rojas Doza (C36873) Oscar Alvarez Poveda (C003949 Ricardo Jose Suarez Sancho (C17810) Karolay.. ** Julio 2025**","title":"Ecuacion de Calor en Dos Dimensiones"},{"location":"#introduccion","text":"El presente proyecto, referente a la ecuacion de calor en dos dimensiones, tiene como fin resolver dicha ecuacion, la cual, es una ecuacion en derivadas parciales que modela la distribucion de la temperatura en una region del plano a lo largo del tiempo. La ecuacion de calor es indispensable en la fisica y la ingenieria, puesto que describe procesos de difusion termica en medios homogeneos bajo condiciones ideales. La ecuacion de movimiento esta dada por $$ \\frac{\\partial u}{\\partial t} = c^2 \\left( \\frac{\\partial^2 u}{\\partial x^2} + \\frac{\\partial^2 u}{\\partial y^2} \\right) $$ en donde u(x,y,t) representa la temperatura en la posicion (x,y) en el tiempo t y c es una constante que depende del material. En el desarrollo del proyecto, se resolvera dicha ecucion tanto en Python como en C++, aplicando asi practicas estudiadas en el curso, comi el uso apropiado de recursos de memoria, prinicipios de programacion orientada a objetos, paralelismo en memoria compartida y la documentacion y control de versiones con Git. Asimismo, debemos de experimentar con diferentes condiciones inciales y de frontera, y visualizar la evolucion temporal de la temperatura mediante mapas de colores. La resolucion de la ecuacion de calor en dos dimensiones, integra conocimientos teoricos y practicos en analisis numericos, programacion cientifica y visualizacion de datos, con el fin de construir una simulacion robusta y eficiente del comportamiento termico de un sistema bidimensional.","title":"Introduccion"},{"location":"#metodo-de-crank-nicolson","text":"Tras un largo analisis sobre los metodos posibles a utilizar para resolver la Ecuacion de calor en 2D, optamos por emplear el metodo de Crank-Nicolson. Puesto que este metodo posee varias ventajas, las cuales son: 1) Es estable incondicionalmente: al ser un metodo implicito, es estable para cualquier tamano de paso de tiempo; lo que lo hace ideal si queremos avanzar en el tiempo sin preocuparnos de que la simulacion explote numericamente. 2) Tiene segundo orden en tiempo y en espacio: esto proporciona menor error de truncamiento y resultados mas precisos con menos puntos. 3) Es eficiente en Python y en C++ con las herramientas adecuadas: a pesar de que en este metodo se debe de resolver un sistema linel en cada paso de tiempo, ese trabajo extra se compensa al usar deltas t mas grandes, se necesitan de menos pasos para llegar a una solucion con buena precision y se vuelve mas eficiente a largo plazo. 4) Tiene interpretacion fisica coherente: esto quiere decir que el calor se difunde gradualmente y no abrupdamente, como puede pasar en otros metodos.","title":"Metodo de Crank- Nicolson"},{"location":"#codigo-en-c","text":"Poner el codigo aqui","title":"Codigo en C++"},{"location":"#codigo-en-python","text":"[Haz clic aqui para abrir el notebook del codigo de Python] (https://github.com/Sofido23/ecuacion-de-calor/blob/main/docs/codigo.py.ipynb)","title":"Codigo en Python"}]}