{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Proyecto final Ecuacion de Calor en Dos Dimensiones Universidad de Costa Rica Nombre de los estudiantes: Alba Sofia Rojas Doza (C36873) Oscar Alvarez Poveda (C003949) Ricardo Jose Suarez Sancho (C17810) Karolay Alvarado Navarro (C20359) Julio 2025 Introduccion El presente proyecto, referente a la ecuacion de calor en dos dimensiones, tiene como fin resolver dicha ecuacion, la cual, es una ecuacion en derivadas parciales que modela la distribucion de la temperatura en una region del plano a lo largo del tiempo. La ecuacion de calor es indispensable en la fisica y la ingenieria, puesto que describe procesos de difusion termica en medios homogeneos bajo condiciones ideales. La ecuacion de movimiento esta dada por $$ \\frac{\\partial u}{\\partial t} = c^2 \\left( \\frac{\\partial^2 u}{\\partial x^2} + \\frac{\\partial^2 u}{\\partial y^2} \\right) $$ en donde u(x,y,t) representa la temperatura en la posicion (x,y) en el tiempo t y c es una constante que depende del material. En el desarrollo del proyecto, se resolvera dicha ecucion tanto en Python como en C++, aplicando asi practicas estudiadas en el curso, comi el uso apropiado de recursos de memoria, prinicipios de programacion orientada a objetos, paralelismo en memoria compartida y la documentacion y control de versiones con Git. Asimismo, debemos de experimentar con diferentes condiciones inciales y de frontera, y visualizar la evolucion temporal de la temperatura mediante mapas de colores. La resolucion de la ecuacion de calor en dos dimensiones, integra conocimientos teoricos y practicos en analisis numericos, programacion cientifica y visualizacion de datos, con el fin de construir una simulacion robusta y eficiente del comportamiento termico de un sistema bidimensional. Codigo en C++ Codigo en Python <<<<<<< HEAD Dentro de este mismo repositorio hay un archivo.py en donde se encuentra el codigo en Python. Esta seccion se basa en la explicacion de dicho codigo. Ay = diags([[-ry] (Ny-1), [1+2 ry] (Ny-1), [-ry] (Ny-1)], [-1,0,1], shape=(Ny-1, Ny-1)) By = diags([[ry] (Ny-1), [1-2 ry] (Ny-1), [ry] (Ny-1)], [-1,0,1], shape=(Ny-1, Ny-1)) for n in range(nt): ======= Dentro de este mismo repositorio hay un archivo.py en donde se encuentra el codigo en Python. Esta seccion se basa en la explicacion de dicho codigo. 2d7907e (Actualizacion de contenido)","title":"Proyecto final"},{"location":"#proyecto-final","text":"","title":"Proyecto final"},{"location":"#ecuacion-de-calor-en-dos-dimensiones","text":"Universidad de Costa Rica Nombre de los estudiantes: Alba Sofia Rojas Doza (C36873) Oscar Alvarez Poveda (C003949) Ricardo Jose Suarez Sancho (C17810) Karolay Alvarado Navarro (C20359) Julio 2025","title":"Ecuacion de Calor en Dos Dimensiones"},{"location":"#introduccion","text":"El presente proyecto, referente a la ecuacion de calor en dos dimensiones, tiene como fin resolver dicha ecuacion, la cual, es una ecuacion en derivadas parciales que modela la distribucion de la temperatura en una region del plano a lo largo del tiempo. La ecuacion de calor es indispensable en la fisica y la ingenieria, puesto que describe procesos de difusion termica en medios homogeneos bajo condiciones ideales. La ecuacion de movimiento esta dada por $$ \\frac{\\partial u}{\\partial t} = c^2 \\left( \\frac{\\partial^2 u}{\\partial x^2} + \\frac{\\partial^2 u}{\\partial y^2} \\right) $$ en donde u(x,y,t) representa la temperatura en la posicion (x,y) en el tiempo t y c es una constante que depende del material. En el desarrollo del proyecto, se resolvera dicha ecucion tanto en Python como en C++, aplicando asi practicas estudiadas en el curso, comi el uso apropiado de recursos de memoria, prinicipios de programacion orientada a objetos, paralelismo en memoria compartida y la documentacion y control de versiones con Git. Asimismo, debemos de experimentar con diferentes condiciones inciales y de frontera, y visualizar la evolucion temporal de la temperatura mediante mapas de colores. La resolucion de la ecuacion de calor en dos dimensiones, integra conocimientos teoricos y practicos en analisis numericos, programacion cientifica y visualizacion de datos, con el fin de construir una simulacion robusta y eficiente del comportamiento termico de un sistema bidimensional.","title":"Introduccion"},{"location":"#codigo-en-c","text":"","title":"Codigo en C++"},{"location":"#codigo-en-python","text":"<<<<<<< HEAD Dentro de este mismo repositorio hay un archivo.py en donde se encuentra el codigo en Python. Esta seccion se basa en la explicacion de dicho codigo. Ay = diags([[-ry] (Ny-1), [1+2 ry] (Ny-1), [-ry] (Ny-1)], [-1,0,1], shape=(Ny-1, Ny-1)) By = diags([[ry] (Ny-1), [1-2 ry] (Ny-1), [ry] (Ny-1)], [-1,0,1], shape=(Ny-1, Ny-1)) for n in range(nt): ======= Dentro de este mismo repositorio hay un archivo.py en donde se encuentra el codigo en Python. Esta seccion se basa en la explicacion de dicho codigo. 2d7907e (Actualizacion de contenido)","title":"Codigo en Python"},{"location":"c_mas_mas/","text":"","title":"C mas mas"},{"location":"condiciones/","text":"","title":"Condiciones"},{"location":"crank/","text":"Al buscar una metodolog\u00eda num\u00e9rica para resolver la ecuaci\u00f3n de calor, se puede observar que los m\u00e9todos expl\u00edcitos, aunque son m\u00e1s f\u00e1ciles de programar, presentan limitaciones significativas en cuanto a estabilidad y eficiencia computacional. En una dimensi\u00f3n, puede ser f\u00e1cil aumentar el n\u00famero de puntos de la malla de 100 a 1000, pero para una malla bidimensional, estos aumentos son pr\u00e1cticamente inviables. Por esta raz\u00f3n, se opt\u00f3 por el m\u00e9todo de Crank-Nicolson. A diferencia de los m\u00e9todos expl\u00edcitos, Crank-Nicolson es incondicionalmente estable, lo que permite utilizar pasos de tiempo mayores sin perder estabilidad num\u00e9rica. Adem\u00e1s, su esquema promedio entre el tiempo actual y el siguiente mejora significativamente la precisi\u00f3n temporal en comparaci\u00f3n con otros m\u00e9todos impl\u00edcitos m\u00e1s simples. Aunque su implementaci\u00f3n es m\u00e1s compleja, el rendimiento obtenido y la calidad de los resultados justifican su elecci\u00f3n para el problema a resolver. M\u00e9todo de Crank-Nicolson Este m\u00e9todo consiste en una t\u00e9cnica num\u00e9rica para resolver ecuaciones diferenciales parciales, especialmente la ecuacion de calor o ecuacion de difusion. Es un metodo implicito y de segundo orden; por lo que combina la precision del metodo del punto medio y la estabilidad del metodo implicito. En sintesis, este metodo se basa en una promediacion entre el metodo explicito, que evalua en el tiempo actual tn y el metodo implicito, que evalua en el siguiente tiempo tn+1. En el apartado de los codigos, se explicara a detalle los codigos realizados con el fin de comprender a totalidad como funciona el metodo de Crank-Nicolson para resolver la ecuacion de calor en 2D. Ventajas y desventajas de Crank-Nicolson Ventajas: 1) Estabilidad incondicional: Es estable para cualquier tamano de paso en el tiempo, lo que permite hacer simulaciones con pasos grandes sin que el error explote. 2) Mayor precision: Tanto el tiempo como el espacio es de segudno orden, significa que es mas preciso que los metodos de primer orden, como lo es el metodo explicito o el implicito simple. 3) Simetria temporal: Este metodo es centrado en el tiempo, lo que lo hace ideal para problemas en donde se debe de conservar energia o simetria. Desventajas: 1) Se requiere resolver un sistema lineal en cada paso: Con el metodo de Crank-Nicolson tenemos que resolver matrices en cada paso del tiempo, lo que es mucho mas costoso computacionalmente. 2) Oscilaciones no fisicas: Si esto se aplica a problemas de condiciones inciales, puede producir oscilaciones no reales. 3) Implementacion mas compleja: Este metodo requiere mas trabajo para programarlo, puesto que combina terminos del tiempo actual y del siguiente paso. ## Matriz Tridiagonal En el proceso de implementaci\u00f3n del m\u00e9todo de Crank-Nicolson para la resoluci\u00f3n de la ecuaci\u00f3n de calor, es necesario resolver en cada paso temporal un sistema lineal de ecuaciones cuya matriz asociada es tridiagonal. Una matriz tridiagonal es una matriz cuadrada en la que solo los elementos de la diagonal principal y las dos diagonales adyacentes (la superior y la inferior) pueden tener valores distintos de cero. Este patr\u00f3n de estructura permite representar de manera eficiente operadores como el Laplaciano en una dimensi\u00f3n espacial. En el caso del esquema de Crank-Nicolson, este tipo de matriz se forma tanto en la parte impl\u00edcita como en la parte expl\u00edcita del m\u00e9todo.","title":"Crank"},{"location":"crank/#metodo-de-crank-nicolson","text":"Este m\u00e9todo consiste en una t\u00e9cnica num\u00e9rica para resolver ecuaciones diferenciales parciales, especialmente la ecuacion de calor o ecuacion de difusion. Es un metodo implicito y de segundo orden; por lo que combina la precision del metodo del punto medio y la estabilidad del metodo implicito. En sintesis, este metodo se basa en una promediacion entre el metodo explicito, que evalua en el tiempo actual tn y el metodo implicito, que evalua en el siguiente tiempo tn+1. En el apartado de los codigos, se explicara a detalle los codigos realizados con el fin de comprender a totalidad como funciona el metodo de Crank-Nicolson para resolver la ecuacion de calor en 2D.","title":"M\u00e9todo de Crank-Nicolson"},{"location":"crank/#ventajas-y-desventajas-de-crank-nicolson","text":"Ventajas: 1) Estabilidad incondicional: Es estable para cualquier tamano de paso en el tiempo, lo que permite hacer simulaciones con pasos grandes sin que el error explote. 2) Mayor precision: Tanto el tiempo como el espacio es de segudno orden, significa que es mas preciso que los metodos de primer orden, como lo es el metodo explicito o el implicito simple. 3) Simetria temporal: Este metodo es centrado en el tiempo, lo que lo hace ideal para problemas en donde se debe de conservar energia o simetria. Desventajas: 1) Se requiere resolver un sistema lineal en cada paso: Con el metodo de Crank-Nicolson tenemos que resolver matrices en cada paso del tiempo, lo que es mucho mas costoso computacionalmente. 2) Oscilaciones no fisicas: Si esto se aplica a problemas de condiciones inciales, puede producir oscilaciones no reales. 3) Implementacion mas compleja: Este metodo requiere mas trabajo para programarlo, puesto que combina terminos del tiempo actual y del siguiente paso. ## Matriz Tridiagonal En el proceso de implementaci\u00f3n del m\u00e9todo de Crank-Nicolson para la resoluci\u00f3n de la ecuaci\u00f3n de calor, es necesario resolver en cada paso temporal un sistema lineal de ecuaciones cuya matriz asociada es tridiagonal. Una matriz tridiagonal es una matriz cuadrada en la que solo los elementos de la diagonal principal y las dos diagonales adyacentes (la superior y la inferior) pueden tener valores distintos de cero. Este patr\u00f3n de estructura permite representar de manera eficiente operadores como el Laplaciano en una dimensi\u00f3n espacial. En el caso del esquema de Crank-Nicolson, este tipo de matriz se forma tanto en la parte impl\u00edcita como en la parte expl\u00edcita del m\u00e9todo.","title":"Ventajas y desventajas de Crank-Nicolson"},{"location":"python/","text":"En el presente apartado explicaremos a detalle cada linea de codigo de la resolucion de la Ecuacion de calor realizada en Python.","title":"En el presente apartado explicaremos a detalle cada linea de codigo de la resolucion de la Ecuacion de calor realizada en Python."},{"location":"python/#en-el-presente-apartado-explicaremos-a-detalle-cada-linea-de-codigo-de-la-resolucion-de-la-ecuacion-de-calor-realizada-en-python","text":"","title":"En el presente apartado explicaremos a detalle cada linea de codigo de la resolucion de la Ecuacion de calor realizada en Python."}]}